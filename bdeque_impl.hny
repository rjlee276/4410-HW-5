from synch import *

def Bdeque(n) returns bdeque: 

    """
    bdeque init

    (1) circular bdeque size of n + 1 because our wait condition checks if the next put will cause the left/right pointers to overlap --> causing override
    (2) standard lock
    (3) size field
    (4) left = right = 0 which means bdeque is empty
    (5) condition variable for the synch wait
    """
    bdeque = {
        .bdeque: [None,] * (n + 1), .lock: Lock(), 
        .size: n + 1, .left: 0, .right: 0, 
        .cond: Condition()
    }

def put_left(bd, v): 
    acquire(?bd -> lock)

    """
    checks how many elements are in deque

    suppose we have bdeque initialized to be of size 2 (bdeque impl uses size 2 + 1), if we put left twice we get
    
    (1) left pointer init'd to 0
    (2) put left (1) called so left pointer decremented to index 2 (wraps around)
    (3) puts element at index 2

    (4) put left (2) called so left pointer decremented to index 1
    (5) puts element at index 1

    now we have left pointer at index 1 and right pointer at index 0

    this is the equivalent to a full buffer, but we need to have an extra slot in the buffer so left and right pointers aren't overlapping, 
    risking override

    while statement then checks: 
        (0 - 1 + 3) % 3 == 2
    """
    while (((bd -> right - bd -> left) + bd -> size) % bd -> size) == (bd -> size - 1): 
        wait(?bd -> cond, ?bd -> lock)
    
    bd -> left = ((bd -> left  - 1) + bd -> size) % bd -> size
    bd -> bdeque[bd -> left] = v

    notify(?bd -> cond)
    release(?bd -> lock)

def put_right(bd, v): 
    acquire(?bd -> lock)

    while (((bd -> right - bd -> left) + bd -> size) % bd -> size) == (bd -> size - 1): 
        wait(?bd -> cond, ?bd -> lock)

    bd -> bdeque[bd -> right] = v
    bd -> right = (bd -> right + 1) % bd -> size
    
    notify(?bd -> cond)
    release(?bd -> lock)

#wait condition is waiting until buffer isn't empty
def get_left(bd) returns next: 
    acquire(?bd -> lock)

    while bd -> right == bd -> left: 
        wait(?bd -> cond, ?bd -> lock)

    next = bd -> bdeque[bd -> left]
    bd -> bdeque[bd -> left] = None
    bd -> left = (bd -> left  + 1) % bd -> size

    notify(?bd -> cond)
    release(?bd -> lock)

def get_right(bd) returns prev: 
    acquire(?bd -> lock)

    while bd -> right == bd -> left: 
        wait(?bd -> cond, ?bd -> lock)

    bd -> right = ((bd -> right - 1) + bd -> size) % bd -> size
    prev = bd -> bdeque[bd -> right]
    bd -> bdeque[bd -> right] = None

    notify(?bd -> cond)
    release(?bd -> lock)

#same implementation as get functions, no deletion
def peek_left(bd) returns next:
    acquire(?bd -> lock)

    while bd -> right == bd -> left: 
        wait(?bd -> cond, ?bd -> lock)
    
    next = bd -> bdeque[bd -> left]

    notify(?bd -> cond)
    release(?bd -> lock)

def peek_right(bd) returns prev: 
    acquire(?bd -> lock)

    while bd -> right == bd -> left: 
        wait(?bd -> cond, ?bd -> lock)
    
    prev = bd -> bdeque[((bd -> right - 1) + bd -> size) % bd -> size]
    
    notify(?bd -> cond)
    release(?bd -> lock)