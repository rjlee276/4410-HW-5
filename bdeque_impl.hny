from synch import Lock, acquire, release, Condition, wait, notify

def Bdeque(n) returns bdeque: 

    """
    bdeque init

    (1) circular bdeque size of n + 1 because our wait condition checks if the next put will cause the left/right pointers to overlap --> causing override
    (2) standard lock
    (3) size field
    (4) left = right = 0 which means bdeque is empty
    (5) condition variable for the synch wait
    """
    bdeque = {
        .bdeque: [None,] * (n + 1), .lock: Lock(), 
        .size: n + 1, .left: 0, .right: 0, 
        .nfull: Condition(), .nempty: Condition()
    }

def put_left(d, v): 
    acquire(?d -> lock)

    """
    checks how many elements are in deque

    suppose we have bdeque initialized to be of size 2 (bdeque impl uses size 2 + 1), if we put left twice we get
    
    (1) left pointer init'd to 0
    (2) put left (1) called so left pointer decremented to index 2 (wraps around)
    (3) puts element at index 2

    (4) put left (2) called so left pointer decremented to index 1
    (5) puts element at index 1

    now we have left pointer at index 1 and right pointer at index 0

    this is the equivalent to a full buffer, but we need to have an extra slot in the buffer so left and right pointers aren't overlapping, 
    risking override

    while statement then checks: 
        (0 - 1 + 3) % 3 == 2
    """
    while (((d -> right - d -> left) + d -> size) % d -> size) == (d -> size - 1): 
        wait(?d -> nfull, ?d -> lock)
    
    d -> left = ((d -> left  - 1) + d -> size) % d -> size
    d -> bdeque[d -> left] = v

    notify(?d -> nempty)
    release(?d -> lock)

def put_right(d, v): 
    acquire(?d -> lock)

    while (((d -> right - d -> left) + d -> size) % d -> size) == (d -> size - 1): 
        wait(?d -> nfull, ?d -> lock)

    d -> bdeque[d -> right] = v
    d -> right = (d -> right + 1) % d -> size
    
    notify(?d -> nempty)
    release(?d -> lock)

#wait condition is waiting until buffer isn't empty
def get_left(d) returns next: 
    acquire(?d -> lock)

    while d -> right == d -> left: 
        wait(?d -> nempty, ?d -> lock)

    next = d -> bdeque[d -> left]
    d -> bdeque[d -> left] = None
    d -> left = (d -> left  + 1) % d -> size

    notify(?d -> nfull)
    release(?d -> lock)

def get_right(d) returns prev: 
    acquire(?d -> lock)

    while d -> right == d -> left: 
        wait(?d -> nempty, ?d -> lock)

    d -> right = ((d -> right - 1) + d -> size) % d -> size
    prev = d -> bdeque[d -> right]
    d -> bdeque[d -> right] = None

    notify(?d -> nfull)
    release(?d -> lock)

#same implementation as get functions, no deletion
def peek_left(d) returns next:
    acquire(?d -> lock)

    while d -> right == d -> left: 
        wait(?d -> nempty, ?d -> lock)
    
    next = d -> bdeque[d -> left]

    release(?d -> lock)

def peek_right(d) returns prev: 
    acquire(?d -> lock)

    while d -> right == d -> left: 
        wait(?d -> nempty, ?d -> lock)
    
    prev = d -> bdeque[((d -> right - 1) + d -> size) % d -> size]
    
    release(?d -> lock)