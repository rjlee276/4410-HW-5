def Bdeque(n) returns bdeque: 
    bdeque = {
        .bdeque: [None,] * (n + 1), .size: n + 1, 
        .left: 0, .right: 0
    }

def put_left(d, v): 

    atomically when (((d -> right - d -> left) + d -> size) % d -> size) != (d -> size - 1):
        d -> left = ((d -> left  - 1) + d -> size) % d -> size
        d -> bdeque[d -> left] = v
        
def put_right(d, v): 

    atomically when (((d -> right - d -> left) + d -> size) % d -> size) != (d -> size - 1): 
        d -> bdeque[d -> right] = v
        d -> right = (d -> right + 1) % d -> size

def get_left(d) returns next: 

    atomically when d -> right != d -> left: 
        next = d -> bdeque[d -> left]
        d -> bdeque[d -> left] = None
        d -> left = (d -> left  + 1) % d -> size

def get_right(d) returns prev: 

    atomically when d -> right != d -> left: 
        d -> right = ((d -> right - 1) + d -> size) % d -> size
        prev = d -> bdeque[d -> right]
        d -> bdeque[d -> right] = None

def peek_left(d) returns next:

    atomically when d -> right != d -> left: 
        next = d -> bdeque[d -> left]

def peek_right(d) returns prev: 

    atomically when d -> right != d -> left: 
          prev = d -> bdeque[((d -> right - 1) + d -> size) % d -> size]